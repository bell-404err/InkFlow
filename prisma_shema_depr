generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement()) //PK of table (model)

  nickname String?   @unique
  email    String    @unique
  password String
  role     UserRoles @default(USER)
  avatar   String?

  userPosts         Post[]
  userComments      Comment[]
  userStars         Star[]
  userReactions     Reaction[]
  userNotifications Notification[]
}

model Post {
  id          Int @id @default(autoincrement())
  user_id     Int
  category_id Int

  title        String
  contentBlock ContentBlock[]
  // views        Int
  likes        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  author   User     @relation(fields: [user_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])

  images   Image[]
  comments Comment[]
  stars    Star[]
  tags     Tag[]     @relation("PostTags") // Relation: many-to-many Post-Tag (Prisma will make itself)
}

model ContentBlock {
  id      Int @id @default(autoincrement())
  post_id Int

  type    BlockType
  content String
  order   Int

  post Post @relation(fields: [post_id], references: [id])
}

model Image {
  id      Int @default(autoincrement())
  post_id Int

  url      String
  position Int

  post Post @relation(fields: [post_id], references: [id])
}

model Comment {
  id      Int @id @default(autoincrement()) // PK
  user_id Int // FK
  post_id Int // FK

  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])

  reactions Reaction[]
}

model Category {
  id Int @id @default(autoincrement()) // PK

  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  categoryPosts Post[]
}

model Reaction {
  id         Int  @id @default(autoincrement()) // PK
  user_id    Int // FK
  post_id    Int? // FK
  comment_id Int? // FK

  createdAt DateTime @default(now())

  user    User     @relation(fields: [user_id], references: [id]) // Relation: this FK to User.userId
  post    Post?    @relation(fields: [post_id], references: [id]) // Relation: this FK to Post.id
  comment Comment? @relation(fields: [comment_id], references: [id]) // Realation this FK to Comment.id
}

model Tag {
  id Int @id @default(autoincrement()) // PK

  name String @unique

  tagPosts Post[] @relation("PostTags") // Relation: many-to-many Post-Tag (Prisma will make itself)
}

model Notification {
  id      Int @id @default(autoincrement()) // PK
  user_id Int // FK

  message          String
  isRead           Boolean          @default(false)
  createdAt        DateTime         @default(now())
  notificationType NotificationType

  isStarNotificiationEnabled         Boolean @default(true)
  isLikeNotificiationEnabled         Boolean @default(true)
  isCommentReplyNotificiationEnabled Boolean @default(true)

  postLikes Star[]
  likes     Like[]
  start     Star[]
  user      User   @relation(fields: [user_id], references: [id]) // Relation: this FK to User.userId
}

model Star {
  id               Int @id @default(autoincrement()) //PK
  user_id          Int //FK
  notificiation_id Int //FK
  post_id          Int // FK

  isRead Boolean @default(false)

  notificiation Notification @relation(fields: [notificiation_id], references: [id])
  post          Post         @relation(fields: [post_id], references: [id])
}

enum UserRoles {
  USER
  ADMIN
}

enum NotificationType {
  LIKE
  STAR
  COMMENT
}

enum ReactionType {
  LIKE
  DISLIKE
  NONE
}

enum BlockType {
  TEXT
  IMAGE
}
